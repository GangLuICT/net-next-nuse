/*
 * System call prototypes for rump.
 * DO NOT EDIT-- this file is automatically generated.
 */



struct pollfd;
struct epoll_event;
struct mmsghdr;

/* XXX */
#define __user
#define user_msghdr msghdr

typedef void (*sys_call_ptr_t)(void);
extern const sys_call_ptr_t rump_sys_call_table[];

struct syscall_args {
	unsigned long args[6];
};

#ifndef umode_t
typedef unsigned short		umode_t;
#endif /* umode_t */

long rump___sysimpl_read(unsigned int fd, char __user * buf, size_t count);
long rump___sysimpl_write(unsigned int fd, const char __user * buf, size_t count);
long rump___sysimpl_close(unsigned int fd);
long rump___sysimpl_poll(struct pollfd __user * ufds, unsigned int nfds, int timeout);
long rump___sysimpl_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);
long rump___sysimpl_pwrite64(unsigned int fd, const char __user * buf, size_t count, loff_t pos);
long rump___sysimpl_writev(unsigned long fd, const struct iovec __user * vec, unsigned long vlen);
long rump___sysimpl_pipe(int __user * fildes);
long rump___sysimpl_select(int n, fd_set __user * inp, fd_set __user * outp, fd_set __user * exp, struct timeval __user * tvp);
long rump___sysimpl_socket(int, int, int);
long rump___sysimpl_connect(int, struct sockaddr __user *, int);
long rump___sysimpl_accept(int, struct sockaddr __user *, int __user *);
long rump___sysimpl_sendto(int, void __user *, size_t, unsigned,                           struct sockaddr __user *, int);
long rump___sysimpl_recvfrom(int, void __user *, size_t, unsigned,                             struct sockaddr __user *, int __user *);
long rump___sysimpl_sendmsg(int fd, struct user_msghdr __user * msg, unsigned flags);
long rump___sysimpl_recvmsg(int fd, struct user_msghdr __user * msg, unsigned flags);
long rump___sysimpl_bind(int, struct sockaddr __user *, int);
long rump___sysimpl_listen(int, int);
long rump___sysimpl_getsockname(int, struct sockaddr __user *, int __user *);
long rump___sysimpl_getpeername(int, struct sockaddr __user *, int __user *);
long rump___sysimpl_setsockopt(int fd, int level, int optname, char __user * optval, int optlen);
long rump___sysimpl_getsockopt(int fd, int level, int optname, char __user * optval, int __user * optlen);
long rump___sysimpl_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);
long rump___sysimpl_epoll_create(int size);
long rump___sysimpl_clock_gettime(clockid_t which_clock, struct timespec __user * tp);
long rump___sysimpl_epoll_wait(int epfd, struct epoll_event __user * events, int maxevents, int timeout);
long rump___sysimpl_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user * event);
long rump___sysimpl_pwritev(unsigned long fd, const struct iovec __user * vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);
long rump___sysimpl_sendmmsg(int fd, struct mmsghdr __user * msg, unsigned int vlen, unsigned flags);
