/*
 * System call prototypes for rump.
 * DO NOT EDIT-- this file is automatically generated.
 */



struct pollfd;
struct epoll_event;
struct msghdr;
struct mmsghdr;
struct iovec;
struct sockaddr;
struct timeval;
struct timespec;

/* XXX */
#define __user
#define user_msghdr msghdr

typedef void (*sys_call_ptr_t)(void);
extern const sys_call_ptr_t rump_sys_call_table[];

struct syscall_args {
	unsigned long args[6];
};

#ifndef umode_t
typedef unsigned short		umode_t;
#endif /* umode_t */

long rump___sysimpl_read(unsigned int fd, char __user * buf, size_t count);
long rump_sys_read(unsigned int fd, char __user * buf, size_t count) __asm("rump___sysimpl_read");
long rump___sysimpl_write(unsigned int fd, const char __user * buf, size_t count);
long rump_sys_write(unsigned int fd, const char __user * buf, size_t count) __asm("rump___sysimpl_write");
long rump___sysimpl_open(const char __user * filename, int flags, umode_t mode);
long rump_sys_open(const char __user * filename, int flags, umode_t mode) __asm("rump___sysimpl_open");
long rump___sysimpl_close(unsigned int fd);
long rump_sys_close(unsigned int fd) __asm("rump___sysimpl_close");
long rump___sysimpl_poll(struct pollfd __user * ufds, unsigned int nfds, int timeout);
long rump_sys_poll(struct pollfd __user * ufds, unsigned int nfds, int timeout) __asm("rump___sysimpl_poll");
long rump___sysimpl_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);
long rump_sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg) __asm("rump___sysimpl_ioctl");
long rump___sysimpl_pwrite64(unsigned int fd, const char __user * buf, size_t count, loff_t pos);
long rump_sys_pwrite64(unsigned int fd, const char __user * buf, size_t count, loff_t pos) __asm("rump___sysimpl_pwrite64");
long rump___sysimpl_writev(unsigned long fd, const struct iovec __user * vec, unsigned long vlen);
long rump_sys_writev(unsigned long fd, const struct iovec __user * vec, unsigned long vlen) __asm("rump___sysimpl_writev");
long rump___sysimpl_pipe(int __user * fildes);
long rump_sys_pipe(int __user * fildes) __asm("rump___sysimpl_pipe");
long rump___sysimpl_select(int n, fd_set __user * inp, fd_set __user * outp, fd_set __user * exp, struct timeval __user * tvp);
long rump_sys_select(int n, fd_set __user * inp, fd_set __user * outp, fd_set __user * exp, struct timeval __user * tvp) __asm("rump___sysimpl_select");
long rump___sysimpl_nanosleep(struct timespec __user * rqtp, struct timespec __user * rmtp);
long rump_sys_nanosleep(struct timespec __user * rqtp, struct timespec __user * rmtp) __asm("rump___sysimpl_nanosleep");
long rump___sysimpl_getpid(void);
long rump_sys_getpid(void) __asm("rump___sysimpl_getpid");
long rump___sysimpl_socket(int, int, int);
long rump_sys_socket(int, int, int) __asm("rump___sysimpl_socket");
long rump___sysimpl_connect(int, struct sockaddr __user *, int);
long rump_sys_connect(int, struct sockaddr __user *, int) __asm("rump___sysimpl_connect");
long rump___sysimpl_accept(int, struct sockaddr __user *, int __user *);
long rump_sys_accept(int, struct sockaddr __user *, int __user *) __asm("rump___sysimpl_accept");
long rump___sysimpl_sendto(int, void __user *, size_t, unsigned,                           struct sockaddr __user *, int);
long rump_sys_sendto(int, void __user *, size_t, unsigned,                           struct sockaddr __user *, int) __asm("rump___sysimpl_sendto");
long rump___sysimpl_recvfrom(int, void __user *, size_t, unsigned,                             struct sockaddr __user *, int __user *);
long rump_sys_recvfrom(int, void __user *, size_t, unsigned,                             struct sockaddr __user *, int __user *) __asm("rump___sysimpl_recvfrom");
long rump___sysimpl_sendmsg(int fd, struct user_msghdr __user * msg, unsigned flags);
long rump_sys_sendmsg(int fd, struct user_msghdr __user * msg, unsigned flags) __asm("rump___sysimpl_sendmsg");
long rump___sysimpl_recvmsg(int fd, struct user_msghdr __user * msg, unsigned flags);
long rump_sys_recvmsg(int fd, struct user_msghdr __user * msg, unsigned flags) __asm("rump___sysimpl_recvmsg");
long rump___sysimpl_bind(int, struct sockaddr __user *, int);
long rump_sys_bind(int, struct sockaddr __user *, int) __asm("rump___sysimpl_bind");
long rump___sysimpl_listen(int, int);
long rump_sys_listen(int, int) __asm("rump___sysimpl_listen");
long rump___sysimpl_getsockname(int, struct sockaddr __user *, int __user *);
long rump_sys_getsockname(int, struct sockaddr __user *, int __user *) __asm("rump___sysimpl_getsockname");
long rump___sysimpl_getpeername(int, struct sockaddr __user *, int __user *);
long rump_sys_getpeername(int, struct sockaddr __user *, int __user *) __asm("rump___sysimpl_getpeername");
long rump___sysimpl_setsockopt(int fd, int level, int optname, char __user * optval, int optlen);
long rump_sys_setsockopt(int fd, int level, int optname, char __user * optval, int optlen) __asm("rump___sysimpl_setsockopt");
long rump___sysimpl_getsockopt(int fd, int level, int optname, char __user * optval, int __user * optlen);
long rump_sys_getsockopt(int fd, int level, int optname, char __user * optval, int __user * optlen) __asm("rump___sysimpl_getsockopt");
long rump___sysimpl_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);
long rump_sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg) __asm("rump___sysimpl_fcntl");
long rump___sysimpl_reboot(int magic1, int magic2, unsigned int cmd, void __user * arg);
long rump_sys_reboot(int magic1, int magic2, unsigned int cmd, void __user * arg) __asm("rump___sysimpl_reboot");
long rump___sysimpl_epoll_create(int size);
long rump_sys_epoll_create(int size) __asm("rump___sysimpl_epoll_create");
long rump___sysimpl_clock_gettime(clockid_t which_clock, struct timespec __user * tp);
long rump_sys_clock_gettime(clockid_t which_clock, struct timespec __user * tp) __asm("rump___sysimpl_clock_gettime");
long rump___sysimpl_epoll_wait(int epfd, struct epoll_event __user * events, int maxevents, int timeout);
long rump_sys_epoll_wait(int epfd, struct epoll_event __user * events, int maxevents, int timeout) __asm("rump___sysimpl_epoll_wait");
long rump___sysimpl_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user * event);
long rump_sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user * event) __asm("rump___sysimpl_epoll_ctl");
long rump___sysimpl_pwritev(unsigned long fd, const struct iovec __user * vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);
long rump_sys_pwritev(unsigned long fd, const struct iovec __user * vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h) __asm("rump___sysimpl_pwritev");
long rump___sysimpl_sendmmsg(int fd, struct mmsghdr __user * msg, unsigned int vlen, unsigned flags);
long rump_sys_sendmmsg(int fd, struct mmsghdr __user * msg, unsigned int vlen, unsigned flags) __asm("rump___sysimpl_sendmmsg");
